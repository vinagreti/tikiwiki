{"version":3,"sources":["/source/pivot_spec.coffee","pivot_spec.min.js"],"names":["fixtureData","describe","table","beforeEach","done","$","pivotUI","onRefresh","it","expect","find","length","toBe","val","text","join","data","rows","cols","aggregatorName","vals","rendererName","pivot","aggregators","derivers","ref","sortAs","pivotUtilities","aggregator","filter","record","name","derivedAttributes","birthyear","dateFormat","trialbins","bin","sorters","attr","received_PivotData","received_rendererOptions","count2x","push","this","value","format","x","renderer","a","b","addClass","greeting","rendererOptions","agg","getAggregator","sumOverSumOpts","aoaInput","pd","SubtotalPivotData","aosInput","functionInput","tableInput","getRowKeys","toEqual","getColKeys","c","i","j","len","len1","numNotNull","numNull","r","ref1","results","s","spots","spot","hdr","naturalSort","sort","numberFormat","nf","scaler","suffix","thousandsSep","decimalSep","prefix","digitsAfterDecimal","showZero","df","Date","binner","toBeNaN","call"],"mappings":"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","file":"pivot_spec.min.js","sourcesContent":["fixtureData = [\r\n    [\"name\",    \"gender\",   \"colour\",    \"birthday\",     \"trials\",   \"successes\"],\r\n    [\"Nick\",    \"male\",     \"blue\",      \"1982-11-07\",   103,        12],\r\n    [\"Jane\",    \"female\",   \"red\",       \"1982-11-08\",   95,         25],\r\n    [\"John\",    \"male\",     \"blue\",      \"1982-12-08\",   112,        30],\r\n    [\"Carol\",   \"female\",   \"yellow\",    \"1983-12-08\",   102,        14]\r\n]\r\n\r\n\r\ndescribe \"$.pivotUI()\", ->\r\n    describe \"with no rows/cols, default count aggregator, default TableRenderer\",  ->\r\n        table = null\r\n\r\n        beforeEach (done) ->\r\n            table = $(\"<div>\").pivotUI fixtureData, onRefresh: done\r\n        it \"has all the basic UI elements\", (done) ->\r\n            expect table.find(\"td.pvtAxisContainer\").length\r\n            .toBe  3\r\n            expect table.find(\"td.pvtRendererArea\").length\r\n            .toBe  1\r\n            expect table.find(\"td.pvtVals\").length\r\n            .toBe  1\r\n            expect table.find(\"select.pvtRenderer\").length\r\n            .toBe  1\r\n            expect table.find(\"select.pvtAggregator\").length\r\n            .toBe  1\r\n            expect table.find(\"span.pvtAttr\").length\r\n            .toBe  6\r\n            done()\r\n\r\n        it \"reflects its inputs\", (done) ->\r\n            expect table.find(\"td.pvtUnused span.pvtAttr\").length\r\n            .toBe  6\r\n            expect table.find(\"select.pvtRenderer\").val()\r\n            .toBe  \"Table\"\r\n            expect table.find(\"select.pvtAggregator\").val()\r\n            .toBe  \"Count\"\r\n            done()\r\n\r\n        it \"renders a table\", (done) ->\r\n            expect table.find(\"table.pvtTable\").length\r\n            .toBe  1 \r\n            done()\r\n\r\n\r\n        describe \"its renderer output\", ->\r\n            it \"has the correct type and number of cells\", (done) ->\r\n                expect table.find(\"th.pvtTotalLabel\").length\r\n                .toBe  1 \r\n                expect table.find(\"td.pvtGrandTotal\").length\r\n                .toBe  1 \r\n                done()\r\n\r\n            it \"has the correct textual representation\", (done) ->\r\n                expect table.find(\"table.pvtTable\").text()\r\n                .toBe [\"Totals\", \"4\"].join(\"\")\r\n                done()\r\n\r\n            it \"has a correct grand total with data value\", (done) ->\r\n                expect table.find(\"td.pvtGrandTotal\").text()\r\n                .toBe  \"4\"\r\n                expect table.find(\"td.pvtGrandTotal\").data(\"value\")\r\n                .toBe  4\r\n                done()\r\n\r\n    describe \"with rows/cols, sum-over-sum aggregator, Heatmap renderer\",  ->\r\n        table = null\r\n\r\n        beforeEach (done) ->\r\n            table = $(\"<div>\").pivotUI fixtureData, \r\n                rows: [\"gender\"], cols: [\"colour\"]\r\n                aggregatorName: \"Sum over Sum\"\r\n                vals: [\"successes\", \"trials\"]\r\n                rendererName: \"Heatmap\"\r\n                onRefresh: done\r\n\r\n        it \"has all the basic UI elements\", (done) ->\r\n            expect table.find(\"td.pvtAxisContainer\").length\r\n            .toBe  3\r\n            expect table.find(\"td.pvtRendererArea\").length\r\n            .toBe  1\r\n            expect table.find(\"td.pvtVals\").length\r\n            .toBe  1\r\n            expect table.find(\"select.pvtRenderer\").length\r\n            .toBe  1\r\n            expect table.find(\"select.pvtAggregator\").length\r\n            .toBe  1\r\n            expect table.find(\"span.pvtAttr\").length\r\n            .toBe  6\r\n            done()\r\n\r\n        it \"reflects its inputs\", (done) ->\r\n            expect table.find(\"td.pvtUnused span.pvtAttr\").length\r\n            .toBe  4\r\n            expect table.find(\"td.pvtRows span.pvtAttr\").length\r\n            .toBe  1\r\n            expect table.find(\"td.pvtCols span.pvtAttr\").length\r\n            .toBe  1\r\n            expect table.find(\"select.pvtRenderer\").val()\r\n            .toBe  \"Heatmap\"\r\n            expect table.find(\"select.pvtAggregator\").val()\r\n            .toBe  \"Sum over Sum\"\r\n            done()\r\n\r\n        it \"renders a table\", (done) ->\r\n            expect table.find(\"table.pvtTable\").length\r\n            .toBe  1 \r\n            done()\r\n\r\n        describe \"its renderer output\", ->\r\n            it \"has the correct type and number of cells\", (done) ->\r\n                expect table.find(\"th.pvtAxisLabel\").length\r\n                .toBe  2 \r\n                expect table.find(\"th.pvtRowLabel\").length\r\n                .toBe  2 \r\n                expect table.find(\"th.pvtColLabel\").length\r\n                .toBe  3 \r\n                expect table.find(\"th.pvtTotalLabel\").length\r\n                .toBe  2 \r\n                expect table.find(\"td.pvtVal\").length\r\n                .toBe  6 \r\n                expect table.find(\"td.pvtTotal\").length\r\n                .toBe  5 \r\n                expect table.find(\"td.pvtGrandTotal\").length\r\n                .toBe  1 \r\n                done()\r\n\r\n            it \"has the correct textual representation\", (done) ->\r\n                expect table.find(\"table.pvtTable\").text()\r\n                .toBe [\r\n                    \"colour\",   \"blue\", \"red\",  \"yellow\",   \"Totals\",\r\n                    \"gender\",\r\n                    \"female\",           \"0.26\", \"0.14\",     \"0.20\",\r\n                    \"male\",     \"0.20\",                     \"0.20\",\r\n                    \"Totals\",   \"0.20\", \"0.26\", \"0.14\",     \"0.20\"\r\n                    ].join(\"\")\r\n                done()\r\n\r\n            it \"has a correct spot-checked cell with data value\", (done) ->\r\n                expect table.find(\"td.col0.row1\").text()\r\n                .toBe  \"0.20\"\r\n                expect table.find(\"td.col0.row1\").data(\"value\")\r\n                .toBe  (12+30)/(103+112)\r\n                done()\r\n\r\ndescribe \"$.pivot()\", ->\r\n\r\n    describe \"with no rows/cols, default count aggregator, default TableRenderer\",  ->\r\n        table = $(\"<div>\").pivot fixtureData\r\n\r\n        it \"renders a table\", ->\r\n            expect table.find(\"table.pvtTable\").length\r\n            .toBe  1 \r\n\r\n        describe \"its renderer output\", ->\r\n\r\n            it \"has the correct textual representation\", ->\r\n                expect table.find(\"table.pvtTable\").text()\r\n                .toBe [\"Totals\", \"4\"].join(\"\")\r\n\r\n            it \"has a correct grand total with data value\", ->\r\n                expect table.find(\"td.pvtGrandTotal\").text()\r\n                .toBe  \"4\"\r\n                expect table.find(\"td.pvtGrandTotal\").data(\"value\")\r\n                .toBe  4\r\n\r\n    describe \"with rows/cols, sum aggregator, derivedAttributes, filter and sorters\",  ->\r\n        {sortAs, derivers, aggregators} = $.pivotUtilities\r\n        table = $(\"<div>\").pivot fixtureData,\r\n            rows: [\"gender\"], cols: [\"birthyear\"], aggregator: aggregators[\"Sum\"]([\"trialbins\"])\r\n            filter: (record) -> record.name != \"Nick\"\r\n            derivedAttributes:\r\n                birthyear: derivers.dateFormat \"birthday\", \"%y\"\r\n                trialbins: derivers.bin \"trials\", 10\r\n            sorters: (attr) ->\r\n                if attr == \"gender\" then return sortAs([\"male\", \"female\"])\r\n\r\n        it \"renders a table with the correct textual representation\", ->\r\n            expect table.find(\"table.pvtTable\").text()\r\n            .toBe [\r\n                \"birthyear\",    \"1982\",     \"1983\",     \"Totals\"\r\n                \"gender\",  \r\n                \"male\",         \"110.00\",               \"110.00\"\r\n                \"female\",       \"90.00\",    \"100.00\",   \"190.00\"\r\n                \"Totals\",       \"200.00\",   \"100.00\",   \"300.00\"\r\n                ].join(\"\")\r\n\r\n    describe \"with rows/cols, fraction-of aggregator\",  ->\r\n        {aggregators} = $.pivotUtilities\r\n        table = $(\"<div>\").pivot fixtureData,\r\n            rows: [\"gender\"]\r\n            aggregator: aggregators[\"Sum as Fraction of Total\"]([\"trials\"])\r\n\r\n        it \"renders a table with the correct textual representation\", ->\r\n            expect table.find(\"table.pvtTable\").text()\r\n            .toBe [\r\n                \"gender\",  \"Totals\"\r\n                \"female\",  \"47.8%\"\r\n                \"male\",    \"52.2%\"\r\n                \"Totals\",  \"100.0%\"\r\n                ].join(\"\")\r\n\r\n    describe \"with rows/cols, custom aggregator, custom renderer with options\",  ->\r\n        received_PivotData = null\r\n        received_rendererOptions = null\r\n\r\n        table = $(\"<div>\").pivot fixtureData, \r\n            rows: [\"name\", \"colour\"], cols: [\"trials\", \"successes\"]\r\n            aggregator: -> \r\n                count2x: 0\r\n                push: -> @count2x +=2 \r\n                value: -> @count2x\r\n                format: (x) -> \"formatted \" + x\r\n            renderer: (a,b) -> \r\n                received_PivotData = a\r\n                received_rendererOptions = b\r\n                return $(\"<div>\").addClass(b.greeting).text(\"world\")\r\n            rendererOptions: {greeting:\"hithere\"}\r\n\r\n        it \"renders the custom renderer as per options\", ->\r\n            expect table.find(\"div.hithere\").length\r\n            .toBe  1 \r\n\r\n        describe \"its received PivotData object\", ->\r\n            it \"has a correct grand total value and format for custom aggregator\", ->\r\n                agg = received_PivotData.getAggregator([],[])\r\n                val = agg.value()\r\n                expect(val).toBe 8 \r\n                expect(agg.format(val)).toBe \"formatted 8\"\r\n\r\ndescribe \"$.pivotUtilities\", ->\r\n\r\n    describe \".SubtotalPivotData()\", ->\r\n        sumOverSumOpts = \r\n            rows: [], cols: []\r\n            aggregator: $.pivotUtilities.aggregators[\"Sum over Sum\"]([\"a\",\"b\"])\r\n            filter: -> true\r\n            sorters: ->\r\n\r\n        describe \"with array-of-array input\", ->\r\n            aoaInput =  [ [\"a\",\"b\"], [1,2], [3,4] ]\r\n            pd = new $.pivotUtilities.SubtotalPivotData aoaInput, sumOverSumOpts\r\n\r\n            it \"has the correct grand total value\", ->\r\n                expect pd.getAggregator([],[]).value()\r\n                .toBe (1+3)/(2+4)\r\n\r\n        describe \"with array-of-object input\", ->\r\n            aosInput =  [ {a:1, b:2}, {a:3, b:4} ]\r\n            pd = new $.pivotUtilities.SubtotalPivotData aosInput, sumOverSumOpts\r\n\r\n            it \"has the correct grand total value\", ->\r\n                expect pd.getAggregator([],[]).value()\r\n                .toBe (1+3)/(2+4)\r\n\r\n        describe \"with function input\", ->\r\n            functionInput = (record) ->\r\n                record a:1, b:2\r\n                record a:3, b:4\r\n            pd = new $.pivotUtilities.SubtotalPivotData functionInput, sumOverSumOpts\r\n\r\n            it \"has the correct grand total value\", ->\r\n                expect pd.getAggregator([],[]).value()\r\n                .toBe (1+3)/(2+4)\r\n\r\n        describe \"with jQuery table element input\", ->\r\n            tableInput = $ \"\"\"\r\n                <table>\r\n                    <thead> \r\n                        <tr> <th>a</th><th>b</th> </tr>\r\n                    </thead> \r\n                    <tbody>\r\n                        <tr> <td>1</td> <td>2</td> </tr>\r\n                        <tr> <td>3</td> <td>4</td> </tr>\r\n                    </tbody>\r\n                </table>\r\n                \"\"\"\r\n\r\n            pd = new $.pivotUtilities.SubtotalPivotData tableInput, sumOverSumOpts\r\n\r\n            it \"has the correct grand total value\", ->\r\n                expect pd.getAggregator([],[]).value()\r\n                .toBe (1+3)/(2+4)\r\n\r\n\r\n        describe \"with rows/cols, no filters/sorters, count aggregator\", ->\r\n            pd = new $.pivotUtilities.SubtotalPivotData fixtureData, \r\n                rows: [\"name\", \"colour\"], \r\n                cols: [\"trials\", \"successes\"],\r\n                aggregator: $.pivotUtilities.aggregators[\"Count\"](),\r\n                filter: -> true\r\n                sorters: ->\r\n\r\n            it \"has correctly-ordered row keys\", ->\r\n                expect pd.getRowKeys()\r\n                .toEqual [ [ 'Carol', 'yellow' ], [ 'Jane', 'red' ], [ 'John', 'blue' ], [ 'Nick', 'blue' ] ]\r\n               \r\n            it \"has correctly-ordered col keys\", ->\r\n                expect pd.getColKeys()\r\n                .toEqual [ [ 95, 25 ], [ 102, 14 ], [ 103, 12 ], [ 112, 30 ] ]\r\n\r\n            it \"can be iterated over\", ->\r\n                numNotNull = 0\r\n                numNull = 0\r\n                for r in pd.getRowKeys()\r\n                    for c in pd.getColKeys()\r\n                        if pd.getAggregator(r, c).value()?\r\n                            numNotNull++ \r\n                        else\r\n                            numNull++\r\n                expect numNotNull\r\n                .toBe 4\r\n                expect numNull\r\n                .toBe 12\r\n\r\n            it \"has a correct spot-checked aggregator\", ->\r\n                spots = [ {spot: [['Carol', 'yellow'], [102, 14]], val: 1}, {spot:  [['Jane', 'red'], [95, 25]], val: 1}, {spot: [['John', 'blue'], [112, 30]], val: 1}, {spot: [['Nick', 'blue'], [103, 12]], val: 1} ]\r\n                for s in spots\r\n                    agg = pd.getAggregator(s.spot[0],s.spot[1])\r\n                    val = agg.value()\r\n                    expect(val).toBe 1 \r\n                    expect(agg.format(val)).toBe \"\" + s.val\r\n\r\n            it \"has correct spot-checked aggregators for subtotal-rows and subtotal-columns\", ->\r\n                spots = [ {spot: [['Carol'], [102]], val: 1}, {spot:  [['Jane'], [95]], val: 1}, {spot: [['John'], [112]], val: 1}, {spot: [['Nick'], [103]], val: 1} ]\r\n                for s in spots\r\n                    agg = pd.getAggregator(s.spot[0], s.spot[1])\r\n                    val = agg.value()\r\n                    expect(val).toBe s.val \r\n                    expect(agg.format(val)).toBe \"\" + s.val\r\n\r\n            it \"has correct row-total for subtotal-rows\", ->\r\n                for hdr in ['Carol', 'Jane', 'John', 'Nick']\r\n                    agg = pd.getAggregator([hdr],[])\r\n                    val = agg.value()\r\n                    expect(val).toBe 1\r\n                    expect(agg.format(val)).toBe \"1\"\r\n\r\n            it \"has correct column-total for subtotal-columns\", ->\r\n                for hdr in [95, 102, 103, 112]\r\n                    agg = pd.getAggregator([],[hdr])\r\n                    val = agg.value()\r\n                    expect(val).toBe 1\r\n                    expect(agg.format(val)).toBe \"1\"\r\n\r\n            it \"has a correct grand total aggregator\", ->\r\n                agg = pd.getAggregator([],[])\r\n                val = agg.value()\r\n                expect(val).toBe 4 \r\n                expect(agg.format(val)).toBe \"4\"\r\n\r\n    describe \".naturalSort()\", ->\r\n        naturalSort = $.pivotUtilities.naturalSort\r\n\r\n        it \"sorts numbers\", ->\r\n            expect [2,1,3,4,0].sort naturalSort\r\n            .toEqual [0,1,2,3,4]\r\n\r\n        it \"sorts strings\", ->\r\n            expect ['b','a','c','d'].sort naturalSort\r\n            .toEqual ['a','b','c','d']\r\n\r\n        it \"sorts numbers in strings\", ->\r\n            expect ['1','12','2','10','11','112'].sort naturalSort\r\n            .toEqual ['1','2','10','11','12','112']\r\n\r\n        it \"sorts 0-padded numbers\", ->\r\n            expect ['02','01','10','11'].sort naturalSort\r\n            .toEqual ['01','02','10','11']\r\n\r\n    describe \".sortAs()\", ->\r\n        sortAs = $.pivotUtilities.sortAs\r\n\r\n        it \"sorts with unknown values sorted at the end\", ->\r\n            expect [5,2,3,4,1].sort sortAs([4,3,2])\r\n            .toEqual [4,3,2,1,5]\r\n\r\n    describe \".numberFormat()\", ->\r\n        numberFormat = $.pivotUtilities.numberFormat\r\n\r\n        it \"formats numbers\", ->\r\n            nf = numberFormat()\r\n            expect nf 1234567.89123456\r\n            .toEqual \"1,234,567.89\"\r\n\r\n        it \"formats booleans\", ->\r\n            nf = numberFormat()\r\n            expect nf true\r\n            .toEqual \"1.00\"\r\n\r\n        it \"formats numbers in strings\", ->\r\n            nf = numberFormat()\r\n            expect nf \"1234567.89123456\"\r\n            .toEqual \"1,234,567.89\"\r\n\r\n        it \"doesn't formats strings\", ->\r\n            nf = numberFormat()\r\n            expect nf \"hi there\"\r\n            .toEqual \"\"\r\n\r\n        it \"doesn't formats objects\", ->\r\n            nf = numberFormat()\r\n            expect nf {a:1}\r\n            .toEqual \"\"\r\n\r\n        it \"formats percentages\", ->\r\n            nf = numberFormat(scaler: 100, suffix: \"%\")\r\n            expect nf 0.12345\r\n            .toEqual \"12.35%\"\r\n\r\n        it \"adds separators\", ->\r\n            nf = numberFormat(thousandsSep: \"a\", decimalSep: \"b\")\r\n            expect nf 1234567.89123456\r\n            .toEqual \"1a234a567b89\"\r\n\r\n        it \"adds prefixes and suffixes\", ->\r\n            nf = numberFormat(prefix: \"a\", suffix: \"b\")\r\n            expect nf 1234567.89123456\r\n            .toEqual \"a1,234,567.89b\"\r\n\r\n        it \"scales and rounds\", ->\r\n            nf = numberFormat(digitsAfterDecimal: 3, scaler: 1000)\r\n            expect nf 1234567.89123456\r\n            .toEqual \"1,234,567,891.235\"\r\n\r\n        it \"shows and hides zero\", ->\r\n            nf = numberFormat(showZero: true)\r\n            expect nf 0\r\n            .toEqual \"0.00\"\r\n\r\n            nf = numberFormat(showZero: false)\r\n            expect nf 0\r\n            .toEqual \"\"\r\n\r\n    describe \".derivers\", ->\r\n        describe \".dateFormat()\", ->\r\n            df = $.pivotUtilities.derivers.dateFormat \"x\", \"abc % %% %%% %a %y %m %n %d %w %x %H %M %S\", true\r\n\r\n            it \"formats date objects\", ->\r\n                expect df {x: new Date(\"2015-01-02T23:43:11Z\")}\r\n                .toBe 'abc % %% %%% %a 2015 01 Jan 02 Fri 5 23 43 11'\r\n\r\n            it \"formats input parsed by Date.parse()\", ->\r\n                expect df {x: \"2015-01-02T23:43:11Z\"}\r\n                .toBe 'abc % %% %%% %a 2015 01 Jan 02 Fri 5 23 43 11'\r\n\r\n                expect df {x: \"bla\"}\r\n                .toBe ''\r\n\r\n        describe \".bin()\", ->\r\n            binner = $.pivotUtilities.derivers.bin \"x\", 10\r\n\r\n            it \"bins numbers\", ->\r\n                expect binner {x: 11}\r\n                .toBe 10\r\n\r\n                expect binner {x: 9}\r\n                .toBe 0\r\n\r\n                expect binner {x: 111}\r\n                .toBe 110\r\n\r\n            it \"bins booleans\", ->\r\n                expect binner {x: true}\r\n                .toBe 0\r\n\r\n            it \"bins negative numbers\", ->\r\n                expect binner {x: -12}\r\n                .toBe -10\r\n\r\n            it \"doesn't bin strings\", ->\r\n                expect binner {x: \"a\"}\r\n                .toBeNaN()\r\n\r\n            it \"doesn't bin objects\", ->\r\n                expect binner {x: {a:1}}\r\n                .toBeNaN()\r\n\r\n# todo\r\n# agg templates\r\n# date.parse -> date() ?\r\n# default options for PivotData, including filter\r\n","(function() {\n  var fixtureData;\n\n  fixtureData = [[\"name\", \"gender\", \"colour\", \"birthday\", \"trials\", \"successes\"], [\"Nick\", \"male\", \"blue\", \"1982-11-07\", 103, 12], [\"Jane\", \"female\", \"red\", \"1982-11-08\", 95, 25], [\"John\", \"male\", \"blue\", \"1982-12-08\", 112, 30], [\"Carol\", \"female\", \"yellow\", \"1983-12-08\", 102, 14]];\n\n  describe(\"$.pivotUI()\", function() {\n    describe(\"with no rows/cols, default count aggregator, default TableRenderer\", function() {\n      var table;\n      table = null;\n      beforeEach(function(done) {\n        return table = $(\"<div>\").pivotUI(fixtureData, {\n          onRefresh: done\n        });\n      });\n      it(\"has all the basic UI elements\", function(done) {\n        expect(table.find(\"td.pvtAxisContainer\").length).toBe(3);\n        expect(table.find(\"td.pvtRendererArea\").length).toBe(1);\n        expect(table.find(\"td.pvtVals\").length).toBe(1);\n        expect(table.find(\"select.pvtRenderer\").length).toBe(1);\n        expect(table.find(\"select.pvtAggregator\").length).toBe(1);\n        expect(table.find(\"span.pvtAttr\").length).toBe(6);\n        return done();\n      });\n      it(\"reflects its inputs\", function(done) {\n        expect(table.find(\"td.pvtUnused span.pvtAttr\").length).toBe(6);\n        expect(table.find(\"select.pvtRenderer\").val()).toBe(\"Table\");\n        expect(table.find(\"select.pvtAggregator\").val()).toBe(\"Count\");\n        return done();\n      });\n      it(\"renders a table\", function(done) {\n        expect(table.find(\"table.pvtTable\").length).toBe(1);\n        return done();\n      });\n      return describe(\"its renderer output\", function() {\n        it(\"has the correct type and number of cells\", function(done) {\n          expect(table.find(\"th.pvtTotalLabel\").length).toBe(1);\n          expect(table.find(\"td.pvtGrandTotal\").length).toBe(1);\n          return done();\n        });\n        it(\"has the correct textual representation\", function(done) {\n          expect(table.find(\"table.pvtTable\").text()).toBe([\"Totals\", \"4\"].join(\"\"));\n          return done();\n        });\n        return it(\"has a correct grand total with data value\", function(done) {\n          expect(table.find(\"td.pvtGrandTotal\").text()).toBe(\"4\");\n          expect(table.find(\"td.pvtGrandTotal\").data(\"value\")).toBe(4);\n          return done();\n        });\n      });\n    });\n    return describe(\"with rows/cols, sum-over-sum aggregator, Heatmap renderer\", function() {\n      var table;\n      table = null;\n      beforeEach(function(done) {\n        return table = $(\"<div>\").pivotUI(fixtureData, {\n          rows: [\"gender\"],\n          cols: [\"colour\"],\n          aggregatorName: \"Sum over Sum\",\n          vals: [\"successes\", \"trials\"],\n          rendererName: \"Heatmap\",\n          onRefresh: done\n        });\n      });\n      it(\"has all the basic UI elements\", function(done) {\n        expect(table.find(\"td.pvtAxisContainer\").length).toBe(3);\n        expect(table.find(\"td.pvtRendererArea\").length).toBe(1);\n        expect(table.find(\"td.pvtVals\").length).toBe(1);\n        expect(table.find(\"select.pvtRenderer\").length).toBe(1);\n        expect(table.find(\"select.pvtAggregator\").length).toBe(1);\n        expect(table.find(\"span.pvtAttr\").length).toBe(6);\n        return done();\n      });\n      it(\"reflects its inputs\", function(done) {\n        expect(table.find(\"td.pvtUnused span.pvtAttr\").length).toBe(4);\n        expect(table.find(\"td.pvtRows span.pvtAttr\").length).toBe(1);\n        expect(table.find(\"td.pvtCols span.pvtAttr\").length).toBe(1);\n        expect(table.find(\"select.pvtRenderer\").val()).toBe(\"Heatmap\");\n        expect(table.find(\"select.pvtAggregator\").val()).toBe(\"Sum over Sum\");\n        return done();\n      });\n      it(\"renders a table\", function(done) {\n        expect(table.find(\"table.pvtTable\").length).toBe(1);\n        return done();\n      });\n      return describe(\"its renderer output\", function() {\n        it(\"has the correct type and number of cells\", function(done) {\n          expect(table.find(\"th.pvtAxisLabel\").length).toBe(2);\n          expect(table.find(\"th.pvtRowLabel\").length).toBe(2);\n          expect(table.find(\"th.pvtColLabel\").length).toBe(3);\n          expect(table.find(\"th.pvtTotalLabel\").length).toBe(2);\n          expect(table.find(\"td.pvtVal\").length).toBe(6);\n          expect(table.find(\"td.pvtTotal\").length).toBe(5);\n          expect(table.find(\"td.pvtGrandTotal\").length).toBe(1);\n          return done();\n        });\n        it(\"has the correct textual representation\", function(done) {\n          expect(table.find(\"table.pvtTable\").text()).toBe([\"colour\", \"blue\", \"red\", \"yellow\", \"Totals\", \"gender\", \"female\", \"0.26\", \"0.14\", \"0.20\", \"male\", \"0.20\", \"0.20\", \"Totals\", \"0.20\", \"0.26\", \"0.14\", \"0.20\"].join(\"\"));\n          return done();\n        });\n        return it(\"has a correct spot-checked cell with data value\", function(done) {\n          expect(table.find(\"td.col0.row1\").text()).toBe(\"0.20\");\n          expect(table.find(\"td.col0.row1\").data(\"value\")).toBe((12 + 30) / (103 + 112));\n          return done();\n        });\n      });\n    });\n  });\n\n  describe(\"$.pivot()\", function() {\n    describe(\"with no rows/cols, default count aggregator, default TableRenderer\", function() {\n      var table;\n      table = $(\"<div>\").pivot(fixtureData);\n      it(\"renders a table\", function() {\n        return expect(table.find(\"table.pvtTable\").length).toBe(1);\n      });\n      return describe(\"its renderer output\", function() {\n        it(\"has the correct textual representation\", function() {\n          return expect(table.find(\"table.pvtTable\").text()).toBe([\"Totals\", \"4\"].join(\"\"));\n        });\n        return it(\"has a correct grand total with data value\", function() {\n          expect(table.find(\"td.pvtGrandTotal\").text()).toBe(\"4\");\n          return expect(table.find(\"td.pvtGrandTotal\").data(\"value\")).toBe(4);\n        });\n      });\n    });\n    describe(\"with rows/cols, sum aggregator, derivedAttributes, filter and sorters\", function() {\n      var aggregators, derivers, ref, sortAs, table;\n      ref = $.pivotUtilities, sortAs = ref.sortAs, derivers = ref.derivers, aggregators = ref.aggregators;\n      table = $(\"<div>\").pivot(fixtureData, {\n        rows: [\"gender\"],\n        cols: [\"birthyear\"],\n        aggregator: aggregators[\"Sum\"]([\"trialbins\"]),\n        filter: function(record) {\n          return record.name !== \"Nick\";\n        },\n        derivedAttributes: {\n          birthyear: derivers.dateFormat(\"birthday\", \"%y\"),\n          trialbins: derivers.bin(\"trials\", 10)\n        },\n        sorters: function(attr) {\n          if (attr === \"gender\") {\n            return sortAs([\"male\", \"female\"]);\n          }\n        }\n      });\n      return it(\"renders a table with the correct textual representation\", function() {\n        return expect(table.find(\"table.pvtTable\").text()).toBe([\"birthyear\", \"1982\", \"1983\", \"Totals\", \"gender\", \"male\", \"110.00\", \"110.00\", \"female\", \"90.00\", \"100.00\", \"190.00\", \"Totals\", \"200.00\", \"100.00\", \"300.00\"].join(\"\"));\n      });\n    });\n    describe(\"with rows/cols, fraction-of aggregator\", function() {\n      var aggregators, table;\n      aggregators = $.pivotUtilities.aggregators;\n      table = $(\"<div>\").pivot(fixtureData, {\n        rows: [\"gender\"],\n        aggregator: aggregators[\"Sum as Fraction of Total\"]([\"trials\"])\n      });\n      return it(\"renders a table with the correct textual representation\", function() {\n        return expect(table.find(\"table.pvtTable\").text()).toBe([\"gender\", \"Totals\", \"female\", \"47.8%\", \"male\", \"52.2%\", \"Totals\", \"100.0%\"].join(\"\"));\n      });\n    });\n    return describe(\"with rows/cols, custom aggregator, custom renderer with options\", function() {\n      var received_PivotData, received_rendererOptions, table;\n      received_PivotData = null;\n      received_rendererOptions = null;\n      table = $(\"<div>\").pivot(fixtureData, {\n        rows: [\"name\", \"colour\"],\n        cols: [\"trials\", \"successes\"],\n        aggregator: function() {\n          return {\n            count2x: 0,\n            push: function() {\n              return this.count2x += 2;\n            },\n            value: function() {\n              return this.count2x;\n            },\n            format: function(x) {\n              return \"formatted \" + x;\n            }\n          };\n        },\n        renderer: function(a, b) {\n          received_PivotData = a;\n          received_rendererOptions = b;\n          return $(\"<div>\").addClass(b.greeting).text(\"world\");\n        },\n        rendererOptions: {\n          greeting: \"hithere\"\n        }\n      });\n      it(\"renders the custom renderer as per options\", function() {\n        return expect(table.find(\"div.hithere\").length).toBe(1);\n      });\n      return describe(\"its received PivotData object\", function() {\n        return it(\"has a correct grand total value and format for custom aggregator\", function() {\n          var agg, val;\n          agg = received_PivotData.getAggregator([], []);\n          val = agg.value();\n          expect(val).toBe(8);\n          return expect(agg.format(val)).toBe(\"formatted 8\");\n        });\n      });\n    });\n  });\n\n  describe(\"$.pivotUtilities\", function() {\n    describe(\".SubtotalPivotData()\", function() {\n      var sumOverSumOpts;\n      sumOverSumOpts = {\n        rows: [],\n        cols: [],\n        aggregator: $.pivotUtilities.aggregators[\"Sum over Sum\"]([\"a\", \"b\"]),\n        filter: function() {\n          return true;\n        },\n        sorters: function() {}\n      };\n      describe(\"with array-of-array input\", function() {\n        var aoaInput, pd;\n        aoaInput = [[\"a\", \"b\"], [1, 2], [3, 4]];\n        pd = new $.pivotUtilities.SubtotalPivotData(aoaInput, sumOverSumOpts);\n        return it(\"has the correct grand total value\", function() {\n          return expect(pd.getAggregator([], []).value()).toBe((1 + 3) / (2 + 4));\n        });\n      });\n      describe(\"with array-of-object input\", function() {\n        var aosInput, pd;\n        aosInput = [\n          {\n            a: 1,\n            b: 2\n          }, {\n            a: 3,\n            b: 4\n          }\n        ];\n        pd = new $.pivotUtilities.SubtotalPivotData(aosInput, sumOverSumOpts);\n        return it(\"has the correct grand total value\", function() {\n          return expect(pd.getAggregator([], []).value()).toBe((1 + 3) / (2 + 4));\n        });\n      });\n      describe(\"with function input\", function() {\n        var functionInput, pd;\n        functionInput = function(record) {\n          record({\n            a: 1,\n            b: 2\n          });\n          return record({\n            a: 3,\n            b: 4\n          });\n        };\n        pd = new $.pivotUtilities.SubtotalPivotData(functionInput, sumOverSumOpts);\n        return it(\"has the correct grand total value\", function() {\n          return expect(pd.getAggregator([], []).value()).toBe((1 + 3) / (2 + 4));\n        });\n      });\n      describe(\"with jQuery table element input\", function() {\n        var pd, tableInput;\n        tableInput = $(\"<table>\\n    <thead> \\n        <tr> <th>a</th><th>b</th> </tr>\\n    </thead> \\n    <tbody>\\n        <tr> <td>1</td> <td>2</td> </tr>\\n        <tr> <td>3</td> <td>4</td> </tr>\\n    </tbody>\\n</table>\");\n        pd = new $.pivotUtilities.SubtotalPivotData(tableInput, sumOverSumOpts);\n        return it(\"has the correct grand total value\", function() {\n          return expect(pd.getAggregator([], []).value()).toBe((1 + 3) / (2 + 4));\n        });\n      });\n      return describe(\"with rows/cols, no filters/sorters, count aggregator\", function() {\n        var pd;\n        pd = new $.pivotUtilities.SubtotalPivotData(fixtureData, {\n          rows: [\"name\", \"colour\"],\n          cols: [\"trials\", \"successes\"],\n          aggregator: $.pivotUtilities.aggregators[\"Count\"](),\n          filter: function() {\n            return true;\n          },\n          sorters: function() {}\n        });\n        it(\"has correctly-ordered row keys\", function() {\n          return expect(pd.getRowKeys()).toEqual([['Carol', 'yellow'], ['Jane', 'red'], ['John', 'blue'], ['Nick', 'blue']]);\n        });\n        it(\"has correctly-ordered col keys\", function() {\n          return expect(pd.getColKeys()).toEqual([[95, 25], [102, 14], [103, 12], [112, 30]]);\n        });\n        it(\"can be iterated over\", function() {\n          var c, i, j, len, len1, numNotNull, numNull, r, ref, ref1;\n          numNotNull = 0;\n          numNull = 0;\n          ref = pd.getRowKeys();\n          for (i = 0, len = ref.length; i < len; i++) {\n            r = ref[i];\n            ref1 = pd.getColKeys();\n            for (j = 0, len1 = ref1.length; j < len1; j++) {\n              c = ref1[j];\n              if (pd.getAggregator(r, c).value() != null) {\n                numNotNull++;\n              } else {\n                numNull++;\n              }\n            }\n          }\n          expect(numNotNull).toBe(4);\n          return expect(numNull).toBe(12);\n        });\n        it(\"has a correct spot-checked aggregator\", function() {\n          var agg, i, len, results, s, spots, val;\n          spots = [\n            {\n              spot: [['Carol', 'yellow'], [102, 14]],\n              val: 1\n            }, {\n              spot: [['Jane', 'red'], [95, 25]],\n              val: 1\n            }, {\n              spot: [['John', 'blue'], [112, 30]],\n              val: 1\n            }, {\n              spot: [['Nick', 'blue'], [103, 12]],\n              val: 1\n            }\n          ];\n          results = [];\n          for (i = 0, len = spots.length; i < len; i++) {\n            s = spots[i];\n            agg = pd.getAggregator(s.spot[0], s.spot[1]);\n            val = agg.value();\n            expect(val).toBe(1);\n            results.push(expect(agg.format(val)).toBe(\"\" + s.val));\n          }\n          return results;\n        });\n        it(\"has correct spot-checked aggregators for subtotal-rows and subtotal-columns\", function() {\n          var agg, i, len, results, s, spots, val;\n          spots = [\n            {\n              spot: [['Carol'], [102]],\n              val: 1\n            }, {\n              spot: [['Jane'], [95]],\n              val: 1\n            }, {\n              spot: [['John'], [112]],\n              val: 1\n            }, {\n              spot: [['Nick'], [103]],\n              val: 1\n            }\n          ];\n          results = [];\n          for (i = 0, len = spots.length; i < len; i++) {\n            s = spots[i];\n            agg = pd.getAggregator(s.spot[0], s.spot[1]);\n            val = agg.value();\n            expect(val).toBe(s.val);\n            results.push(expect(agg.format(val)).toBe(\"\" + s.val));\n          }\n          return results;\n        });\n        it(\"has correct row-total for subtotal-rows\", function() {\n          var agg, hdr, i, len, ref, results, val;\n          ref = ['Carol', 'Jane', 'John', 'Nick'];\n          results = [];\n          for (i = 0, len = ref.length; i < len; i++) {\n            hdr = ref[i];\n            agg = pd.getAggregator([hdr], []);\n            val = agg.value();\n            expect(val).toBe(1);\n            results.push(expect(agg.format(val)).toBe(\"1\"));\n          }\n          return results;\n        });\n        it(\"has correct column-total for subtotal-columns\", function() {\n          var agg, hdr, i, len, ref, results, val;\n          ref = [95, 102, 103, 112];\n          results = [];\n          for (i = 0, len = ref.length; i < len; i++) {\n            hdr = ref[i];\n            agg = pd.getAggregator([], [hdr]);\n            val = agg.value();\n            expect(val).toBe(1);\n            results.push(expect(agg.format(val)).toBe(\"1\"));\n          }\n          return results;\n        });\n        return it(\"has a correct grand total aggregator\", function() {\n          var agg, val;\n          agg = pd.getAggregator([], []);\n          val = agg.value();\n          expect(val).toBe(4);\n          return expect(agg.format(val)).toBe(\"4\");\n        });\n      });\n    });\n    describe(\".naturalSort()\", function() {\n      var naturalSort;\n      naturalSort = $.pivotUtilities.naturalSort;\n      it(\"sorts numbers\", function() {\n        return expect([2, 1, 3, 4, 0].sort(naturalSort)).toEqual([0, 1, 2, 3, 4]);\n      });\n      it(\"sorts strings\", function() {\n        return expect(['b', 'a', 'c', 'd'].sort(naturalSort)).toEqual(['a', 'b', 'c', 'd']);\n      });\n      it(\"sorts numbers in strings\", function() {\n        return expect(['1', '12', '2', '10', '11', '112'].sort(naturalSort)).toEqual(['1', '2', '10', '11', '12', '112']);\n      });\n      return it(\"sorts 0-padded numbers\", function() {\n        return expect(['02', '01', '10', '11'].sort(naturalSort)).toEqual(['01', '02', '10', '11']);\n      });\n    });\n    describe(\".sortAs()\", function() {\n      var sortAs;\n      sortAs = $.pivotUtilities.sortAs;\n      return it(\"sorts with unknown values sorted at the end\", function() {\n        return expect([5, 2, 3, 4, 1].sort(sortAs([4, 3, 2]))).toEqual([4, 3, 2, 1, 5]);\n      });\n    });\n    describe(\".numberFormat()\", function() {\n      var numberFormat;\n      numberFormat = $.pivotUtilities.numberFormat;\n      it(\"formats numbers\", function() {\n        var nf;\n        nf = numberFormat();\n        return expect(nf(1234567.89123456)).toEqual(\"1,234,567.89\");\n      });\n      it(\"formats booleans\", function() {\n        var nf;\n        nf = numberFormat();\n        return expect(nf(true)).toEqual(\"1.00\");\n      });\n      it(\"formats numbers in strings\", function() {\n        var nf;\n        nf = numberFormat();\n        return expect(nf(\"1234567.89123456\")).toEqual(\"1,234,567.89\");\n      });\n      it(\"doesn't formats strings\", function() {\n        var nf;\n        nf = numberFormat();\n        return expect(nf(\"hi there\")).toEqual(\"\");\n      });\n      it(\"doesn't formats objects\", function() {\n        var nf;\n        nf = numberFormat();\n        return expect(nf({\n          a: 1\n        })).toEqual(\"\");\n      });\n      it(\"formats percentages\", function() {\n        var nf;\n        nf = numberFormat({\n          scaler: 100,\n          suffix: \"%\"\n        });\n        return expect(nf(0.12345)).toEqual(\"12.35%\");\n      });\n      it(\"adds separators\", function() {\n        var nf;\n        nf = numberFormat({\n          thousandsSep: \"a\",\n          decimalSep: \"b\"\n        });\n        return expect(nf(1234567.89123456)).toEqual(\"1a234a567b89\");\n      });\n      it(\"adds prefixes and suffixes\", function() {\n        var nf;\n        nf = numberFormat({\n          prefix: \"a\",\n          suffix: \"b\"\n        });\n        return expect(nf(1234567.89123456)).toEqual(\"a1,234,567.89b\");\n      });\n      it(\"scales and rounds\", function() {\n        var nf;\n        nf = numberFormat({\n          digitsAfterDecimal: 3,\n          scaler: 1000\n        });\n        return expect(nf(1234567.89123456)).toEqual(\"1,234,567,891.235\");\n      });\n      return it(\"shows and hides zero\", function() {\n        var nf;\n        nf = numberFormat({\n          showZero: true\n        });\n        expect(nf(0)).toEqual(\"0.00\");\n        nf = numberFormat({\n          showZero: false\n        });\n        return expect(nf(0)).toEqual(\"\");\n      });\n    });\n    return describe(\".derivers\", function() {\n      describe(\".dateFormat()\", function() {\n        var df;\n        df = $.pivotUtilities.derivers.dateFormat(\"x\", \"abc % %% %%% %a %y %m %n %d %w %x %H %M %S\", true);\n        it(\"formats date objects\", function() {\n          return expect(df({\n            x: new Date(\"2015-01-02T23:43:11Z\")\n          })).toBe('abc % %% %%% %a 2015 01 Jan 02 Fri 5 23 43 11');\n        });\n        return it(\"formats input parsed by Date.parse()\", function() {\n          expect(df({\n            x: \"2015-01-02T23:43:11Z\"\n          })).toBe('abc % %% %%% %a 2015 01 Jan 02 Fri 5 23 43 11');\n          return expect(df({\n            x: \"bla\"\n          })).toBe('');\n        });\n      });\n      return describe(\".bin()\", function() {\n        var binner;\n        binner = $.pivotUtilities.derivers.bin(\"x\", 10);\n        it(\"bins numbers\", function() {\n          expect(binner({\n            x: 11\n          })).toBe(10);\n          expect(binner({\n            x: 9\n          })).toBe(0);\n          return expect(binner({\n            x: 111\n          })).toBe(110);\n        });\n        it(\"bins booleans\", function() {\n          return expect(binner({\n            x: true\n          })).toBe(0);\n        });\n        it(\"bins negative numbers\", function() {\n          return expect(binner({\n            x: -12\n          })).toBe(-10);\n        });\n        it(\"doesn't bin strings\", function() {\n          return expect(binner({\n            x: \"a\"\n          })).toBeNaN();\n        });\n        return it(\"doesn't bin objects\", function() {\n          return expect(binner({\n            x: {\n              a: 1\n            }\n          })).toBeNaN();\n        });\n      });\n    });\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot_spec.js.map\n"],"sourceRoot":"/source/"}